---------------------------------------------------------------------------------
-- Address decode logic for IPbus fabric.
--
-- This file has been AUTOGENERATED from the address table - do not
-- hand edit.
--
-- We assume the synthesis tool is clever enough to recognise
-- exclusive conditions in the if statement.
---------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_ipbus_example_xilinx_x7 is

-- START automatically generated VHDL (Mon Jan 20 14:08:06 2025)
  constant IPBUS_SEL_WIDTH: positive := 3;
-- END automatically generated VHDL

  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_ipbus_example_xilinx_x7(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically generated VHDL (Mon Jan 20 14:08:06 2025)
  constant N_SLV_SYSMON: integer := 0;
  constant N_SLV_ICAP: integer := 1;
  constant N_SLV_IPROG: integer := 2;
  constant N_SLV_AXI4LITE_GPIO: integer := 3;
  constant N_SLV_AXI4LITE_GPIO_READBACK_REG: integer := 4;
  constant N_SLV_AXI4LITE_MEM_32BIT: integer := 5;
  constant N_SLV_AXI4LITE_MEM_64BIT: integer := 6;
  constant N_SLAVES: integer := 7;
-- END automatically generated VHDL

end ipbus_decode_ipbus_example_xilinx_x7;

package body ipbus_decode_ipbus_example_xilinx_x7 is

  function ipbus_sel_ipbus_example_xilinx_x7(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically generated VHDL (Mon Jan 20 14:08:06 2025)
    if    std_match(addr, "-------------001---0------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SYSMON, IPBUS_SEL_WIDTH)); -- sysmon / base 0x00010000 / mask 0x00071000
    elsif std_match(addr, "-------------010---0------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ICAP, IPBUS_SEL_WIDTH)); -- icap / base 0x00020000 / mask 0x00071000
    elsif std_match(addr, "-------------011---0------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_IPROG, IPBUS_SEL_WIDTH)); -- iprog / base 0x00030000 / mask 0x00071000
    elsif std_match(addr, "-------------100---0------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_AXI4LITE_GPIO, IPBUS_SEL_WIDTH)); -- axi4lite_gpio / base 0x00040000 / mask 0x00071000
    elsif std_match(addr, "-------------100---1------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_AXI4LITE_GPIO_READBACK_REG, IPBUS_SEL_WIDTH)); -- axi4lite_gpio_readback_reg / base 0x00041000 / mask 0x00071000
    elsif std_match(addr, "-------------101---0------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_AXI4LITE_MEM_32BIT, IPBUS_SEL_WIDTH)); -- axi4lite_mem_32bit / base 0x00050000 / mask 0x00071000
    elsif std_match(addr, "-------------111---0------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_AXI4LITE_MEM_64BIT, IPBUS_SEL_WIDTH)); -- axi4lite_mem_64bit / base 0x00070000 / mask 0x00071000
    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;
-- END automatically generated VHDL

    return sel;

  end function ipbus_sel_ipbus_example_xilinx_x7;

end ipbus_decode_ipbus_example_xilinx_x7;

---------------------------------------------------------------------------------
